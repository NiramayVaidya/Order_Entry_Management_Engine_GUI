#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.22
#  in conjunction with Tcl version 8.6
#    Apr 12, 2019 12:32:30 PM IST  platform: Linux

import sys
from functools import partial
import datetime

import shares_and_clients
import datepicker

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import buy_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    global top
    top = Buy_Toplevel(root)
    buy_support.init(root, top)
    root.mainloop()

w = None
def create_Buy_Toplevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Buy_Toplevel (w)
    buy_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Buy_Toplevel():
    global w
    w.destroy()
    w = None

class Buy_Toplevel:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        # 462 129
        top.geometry("764x450+321+156")
        top.title("Buy")
        top.configure(background="#002272")
        top.configure(highlightcolor="black")
        
        '''
        self.Symbol_Entry = tk.Entry(top)
        self.Symbol_Entry.place(relx=0.039, rely=0.065, height=25
                , relwidth=0.257)
        self.Symbol_Entry.configure(background="#878787")
        self.Symbol_Entry.configure(font="TkFixedFont")
        self.Symbol_Entry.configure(selectbackground="#c4c4c4")
        ''' 
        '''
        self.Symbol_Combobox_Var = tk.StringVar(root)
        self.Symbol_Combobox = ttk.Combobox(top,
                textvariable=self.Symbol_Combobox_Var)
        self.Symbol_Combobox['values'] = sorted(shares_and_clients.shares.keys())
        self.Symbol_Combobox.grid(column=0, row=0)
        self.Symbol_Combobox.place(relx=0.039, rely=0.065, height=25
                , relwidth=0.257)
        self.Symbol_Combobox.configure(background="#878787")
        self.Symbol_Combobox.configure(font="TkFixedFont")
        '''
        # TODO
        # this should instead be a text entry with a suggestion dropdown
        # updating on the entered test and then user selects from the dropdown
        # list
        self.Symbol_Menu_Var = tk.StringVar(top)
        self.Symbol_Choices = {key for key in shares_and_clients.shares.keys()}
        self.Symbol_Menu_Var.set('')
        self.Symbol_Menu = tk.OptionMenu(top, self.Symbol_Menu_Var,
                *sorted(self.Symbol_Choices))
        self.Symbol_Menu.place(relx=0.039, rely=0.065, height=25, 
                relwidth=0.257)
        self.Symbol_Menu.configure(background="#878787")
        self.Symbol_Menu.configure(font="TkFixedFont")
        self.Symbol_Menu_Var.trace('w', self.symbol_change_dropdown)

        '''
        self.Client_Entry = tk.Entry(top)
        self.Client_Entry.place(relx=0.039, rely=0.303, height=25
                , relwidth=0.257)
        self.Client_Entry.configure(background="#878787")
        self.Client_Entry.configure(font="TkFixedFont")
        self.Client_Entry.configure(selectbackground="#c4c4c4")
        '''
        self.Client_Menu_Var = tk.StringVar(top)
        self.Client_Choices = {'0001', '0002'}
        self.Client_Menu_Var.set('')
        self.Client_Menu = tk.OptionMenu(top, self.Client_Menu_Var,
                *self.Client_Choices)
        self.Client_Menu.place(relx=0.039, rely=0.303, height=25, 
                relwidth=0.257)
        self.Client_Menu.configure(background="#878787")
        self.Client_Menu.configure(font="TkFixedFont")
        # selectbackground param does not exist for OptionMenu
        '''
        self.Client_menu.configure(selectbackground="#c4c4c4")
        '''
        self.Client_Menu_Var.trace('w', self.client_change_dropdown)

        self.Size_Entry = tk.Entry(top)
        self.Size_Entry.place(relx=0.039, rely=0.184,height=25, relwidth=0.257)
        self.Size_Entry.configure(background="#878787")
        self.Size_Entry.configure(font="TkFixedFont")
        self.Size_Entry.configure(selectbackground="#c4c4c4")
        
        '''
        self.Counter_Party_Entry = tk.Entry(top)
        self.Counter_Party_Entry.place(relx=0.039, rely=0.563, height=25
                , relwidth=0.257)
        self.Counter_Party_Entry.configure(background="#878787")
        self.Counter_Party_Entry.configure(font="TkFixedFont")
        self.Counter_Party_Entry.configure(selectbackground="#c4c4c4")
        '''
        self.Counter_Party_Menu_Var = tk.StringVar(top)
        self.Counter_Party_Choices = {'C1', 'C2'}
        self.Counter_Party_Menu_Var.set('')
        self.Counter_Party_Menu = tk.OptionMenu(top, self.Counter_Party_Menu_Var,
                *self.Counter_Party_Choices)
        self.Counter_Party_Menu.place(relx=0.039, rely=0.563, height=25, 
                relwidth=0.257)
        self.Counter_Party_Menu.configure(background="#878787")
        self.Counter_Party_Menu.configure(font="TkFixedFont")
        self.Counter_Party_Menu_Var.trace('w', self.counter_party_change_dropdown)

        '''
        self.Exchange_Entry = tk.Entry(top)
        self.Exchange_Entry.place(relx=0.039, rely=0.433, height=25
                , relwidth=0.257)
        self.Exchange_Entry.configure(background="#878787")
        self.Exchange_Entry.configure(font="TkFixedFont")
        self.Exchange_Entry.configure(selectbackground="#c4c4c4")
        '''
        self.Exchange_Menu_Var = tk.StringVar(top)
        self.Exchange_Choices = {'NSE', 'BSE'}
        self.Exchange_Menu_Var.set('')
        self.Exchange_Menu = tk.OptionMenu(top, self.Exchange_Menu_Var,
                *self.Exchange_Choices)
        self.Exchange_Menu.place(relx=0.039, rely=0.433, height=25, 
                relwidth=0.257)
        self.Exchange_Menu.configure(background="#878787")
        self.Exchange_Menu.configure(font="TkFixedFont")
        self.Exchange_Menu_Var.trace('w', self.exchange_change_dropdown)
        
        '''
        self.TIF_Entry = tk.Entry(top)
        self.TIF_Entry.place(relx=0.092, rely=0.779, height=25, relwidth=0.257)
        self.TIF_Entry.configure(background="#878787")
        self.TIF_Entry.configure(font="TkFixedFont")
        self.TIF_Entry.configure(selectbackground="#c4c4c4")
        '''
        self.TIF_Menu_Var = tk.StringVar(top)
        self.TIF_Choices = {'Day order', 'Fill or kill order', 'Immediate or cancel order', 'Good till cancelled', 'Good till date'}
        self.TIF_Menu_Var.set('')
        self.TIF_Menu = tk.OptionMenu(top, self.TIF_Menu_Var,
                *sorted(self.TIF_Choices))
        self.TIF_Menu.place(relx=0.092, rely=0.779, height=25, 
                relwidth=0.257)
        self.TIF_Menu.configure(background="#878787")
        self.TIF_Menu.configure(font="TkFixedFont")
        self.TIF_Menu_Var.trace('w', self.tif_change_dropdown)

        self.Symbol_Label = tk.Label(top)
        self.Symbol_Label.place(relx=0.039, rely=0.022, height=20, width=196)
        self.Symbol_Label.configure(activebackground="#f9f9f9")
        self.Symbol_Label.configure(background="#2b2b2b")
        self.Symbol_Label.configure(foreground="#ffffff")
        self.Symbol_Label.configure(text='''Symbol''')
        self.Symbol_Label.configure(width=196)

        self.Size_Label = tk.Label(top)
        self.Size_Label.place(relx=0.039, rely=0.141, height=20, width=196)
        self.Size_Label.configure(activebackground="#f9f9f9")
        self.Size_Label.configure(background="#2b2b2b")
        self.Size_Label.configure(foreground="#ffffff")
        self.Size_Label.configure(text='''Size''')

        self.Client_Label = tk.Label(top)
        self.Client_Label.place(relx=0.039, rely=0.26, height=20, width=196)
        self.Client_Label.configure(activebackground="#f9f9f9")
        self.Client_Label.configure(background="#2b2b2b")
        self.Client_Label.configure(foreground="#ffffff")
        self.Client_Label.configure(text='''Client''')

        self.Exchange_Label = tk.Label(top)
        self.Exchange_Label.place(relx=0.039, rely=0.39, height=20, width=196)
        self.Exchange_Label.configure(activebackground="#f9f9f9")
        self.Exchange_Label.configure(background="#2b2b2b")
        self.Exchange_Label.configure(foreground="#ffffff")
        self.Exchange_Label.configure(text='''Exchange''')

        self.Counter_Party_Label = tk.Label(top)
        self.Counter_Party_Label.place(relx=0.039, rely=0.519, height=20
                , width=196)
        self.Counter_Party_Label.configure(activebackground="#f9f9f9")
        self.Counter_Party_Label.configure(background="#2b2b2b")
        self.Counter_Party_Label.configure(foreground="#ffffff")
        self.Counter_Party_Label.configure(text='''Counter Party''')

        self.Symbol_Description_Entry_Var = tk.StringVar(top)
        self.Symbol_Description_Entry = tk.Entry(top,
                textvariable=self.Symbol_Description_Entry_Var)
        self.Symbol_Description_Entry.place(relx=0.432, rely=0.097, height=25
                , relwidth=0.257)
        self.Symbol_Description_Entry.configure(background="#878787")
        self.Symbol_Description_Entry.configure(font="TkFixedFont")
        self.Symbol_Description_Entry.configure(selectbackground="#c4c4c4")
        self.Symbol_Description_Entry.configure(width=196)

        '''
        self.Price_Instruction_Entry = tk.Entry(top)
        self.Price_Instruction_Entry.place(relx=0.432, rely=0.238, height=25
                , relwidth=0.257)
        self.Price_Instruction_Entry.configure(background="#878787")
        self.Price_Instruction_Entry.configure(font="TkFixedFont")
        self.Price_Instruction_Entry.configure(selectbackground="#c4c4c4")
        '''
        self.Price_Instruction_Menu_Var = tk.StringVar(top)
        self.Price_Instruction_Choices = {'Limit', 'Limit Open', 'Limit Close',
                'Market', 'Market Open', 'Market Close'}
        self.Price_Instruction_Menu_Var.set('')
        self.Price_Instruction_Menu = tk.OptionMenu(top, self.Price_Instruction_Menu_Var,
                *sorted(self.Price_Instruction_Choices))
        self.Price_Instruction_Menu.place(relx=0.432, rely=0.238, height=25, 
                relwidth=0.257)
        self.Price_Instruction_Menu.configure(background="#878787")
        self.Price_Instruction_Menu.configure(font="TkFixedFont")
        self.Price_Instruction_Menu_Var.trace('w', self.price_instruction_change_dropdown)

        self.Limit_Entry = tk.Entry(top)
        self.Limit_Entry.place(relx=0.772, rely=0.314, height=25, relwidth=0.191)

        self.Limit_Entry.configure(background="#878787")
        self.Limit_Entry.configure(font="TkFixedFont")
        self.Limit_Entry.configure(selectbackground="#c4c4c4")

        self.Client_Description_Entry_Var = tk.StringVar(top)
        self.Client_Description_Entry = tk.Entry(top,
                textvariable=self.Client_Description_Entry_Var)
        self.Client_Description_Entry.place(relx=0.432, rely=0.368, height=25
                , relwidth=0.257)
        self.Client_Description_Entry.configure(background="#878787")
        self.Client_Description_Entry.configure(font="TkFixedFont")
        self.Client_Description_Entry.configure(selectbackground="#c4c4c4")

        '''
        self.Account_Entry = tk.Entry(top)
        self.Account_Entry.place(relx=0.432, rely=0.498, height=25
                , relwidth=0.257)
        self.Account_Entry.configure(background="#878787")
        self.Account_Entry.configure(font="TkFixedFont")
        self.Account_Entry.configure(selectbackground="#c4c4c4")
        '''
        self.Account_Menu_Var = tk.StringVar(top)
        self.Account_Choices = {'01', '02'}
        self.Account_Menu_Var.set('')
        self.Account_Menu = tk.OptionMenu(top, self.Account_Menu_Var,
                *self.Account_Choices)
        self.Account_Menu.place(relx=0.432, rely=0.498, height=25, 
                relwidth=0.257)
        self.Account_Menu.configure(background="#878787")
        self.Account_Menu.configure(font="TkFixedFont")
        self.Account_Menu_Var.trace('w', self.account_change_dropdown)

        '''
        self.TIF_Date_Entry = tk.Entry(top)
        self.TIF_Date_Entry.place(relx=0.452, rely=0.779, height=25
                , relwidth=0.44)
        self.TIF_Date_Entry.configure(background="#878787")
        self.TIF_Date_Entry.configure(font="TkFixedFont")
        self.TIF_Date_Entry.configure(selectbackground="#c4c4c4")
        '''
        now = datetime.datetime.now()
        self.Date_Picker = datepicker.MyDateEntry(top, 
                year=now.year,
                month=now.month, 
                day=now.day,
                selectbackground='gray80',
                selectforeground='black',
                normalbackground='white',
                normalforeground='black',
                background='gray90',
                foreground='black',
                bordercolor='gray90',
                othermonthforeground='gray50',
                othermonthbackground='white',
                othermonthweforeground='gray50',
                othermonthwebackground='white',
                weekendbackground='white',
                weekendforeground='black',
                headersbackground='white',
                headersforeground='gray70',
                x=0.452,
                y=0.779,
                h=25,
                w=0.44)

        self.TIME_IN_FORCE_Label = tk.Label(top)
        self.TIME_IN_FORCE_Label.place(relx=0.0, rely=0.649, height=23
                , width=767)
        self.TIME_IN_FORCE_Label.configure(activebackground="#f9f9f9")
        self.TIME_IN_FORCE_Label.configure(background="#4f4f4f")
        self.TIME_IN_FORCE_Label.configure(font="-family {DejaVu Sans} -size 12")
        self.TIME_IN_FORCE_Label.configure(foreground="#ffffff")
        self.TIME_IN_FORCE_Label.configure(text='''TIME IN FORCE''')

        self._Symbol_Description_Label = tk.Label(top)
        self._Symbol_Description_Label.place(relx=0.432, rely=0.054, height=20
                , width=196)
        self._Symbol_Description_Label.configure(activebackground="#f9f9f9")
        self._Symbol_Description_Label.configure(background="#2b2b2b")
        self._Symbol_Description_Label.configure(foreground="#ffffff")
        self._Symbol_Description_Label.configure(text='''Symbol Description''')

        self.Price_Instruction_Label = tk.Label(top)
        self.Price_Instruction_Label.place(relx=0.432, rely=0.195, height=20
                , width=196)
        self.Price_Instruction_Label.configure(activebackground="#f9f9f9")
        self.Price_Instruction_Label.configure(background="#2b2b2b")
        self.Price_Instruction_Label.configure(foreground="#ffffff")
        self.Price_Instruction_Label.configure(text='''Price Instruction''')

        self.Client_Description_Label = tk.Label(top)
        self.Client_Description_Label.place(relx=0.432, rely=0.325, height=20
                , width=196)
        self.Client_Description_Label.configure(activebackground="#f9f9f9")
        self.Client_Description_Label.configure(background="#2b2b2b")
        self.Client_Description_Label.configure(foreground="#ffffff")
        self.Client_Description_Label.configure(text='''Client Description''')

        self.Account_Label = tk.Label(top)
        self.Account_Label.place(relx=0.432, rely=0.455, height=20, width=196)
        self.Account_Label.configure(activebackground="#f9f9f9")
        self.Account_Label.configure(background="#2b2b2b")
        self.Account_Label.configure(foreground="#ffffff")
        self.Account_Label.configure(text='''Account''')

        self.TIF_Date_Label = tk.Label(top)
        self.TIF_Date_Label.place(relx=0.452, rely=0.736, height=20, width=336)
        self.TIF_Date_Label.configure(activebackground="#f9f9f9")
        self.TIF_Date_Label.configure(background="#2b2b2b")
        self.TIF_Date_Label.configure(foreground="#ffffff")
        self.TIF_Date_Label.configure(text='''TIF Date''')

        self.Limit_Label = tk.Label(top)
        self.Limit_Label.place(relx=0.772, rely=0.271, height=20, width=146)
        self.Limit_Label.configure(activebackground="#f9f9f9")
        self.Limit_Label.configure(background="#2b2b2b")
        self.Limit_Label.configure(foreground="#ffffff")
        self.Limit_Label.configure(text='''Limit''')

        self.OK_Button = ttk.Button(top)
        self.OK_Button.place(relx=0.314, rely=0.887, height=30, width=101)

        buy_ok_handler = partial(buy_support.buy_ok_handler, self, top)

        self.OK_Button.configure(command=buy_ok_handler)
        self.OK_Button.configure(takefocus="")
        self.OK_Button.configure(text='''OK''')
        # OK button action prompt
        # tooltip_font = "TkDefaultFont"
        # ToolTip(self.OK_Button, tooltip_font, '''Press to Submit''', delay=0.5)

        self.Cancel_Button = ttk.Button(top)
        self.Cancel_Button.place(relx=0.537, rely=0.887, height=30, width=101)

        buy_cancel_handler = partial(buy_support.buy_cancel_handler, self, top)

        self.Cancel_Button.configure(command=buy_cancel_handler)
        self.Cancel_Button.configure(takefocus="")
        self.Cancel_Button.configure(text='''Cancel''')

        self.TIF_Label = tk.Label(top)
        self.TIF_Label.place(relx=0.092, rely=0.736, height=20, width=196)
        self.TIF_Label.configure(activebackground="#f9f9f9")
        self.TIF_Label.configure(background="#2b2b2b")
        self.TIF_Label.configure(foreground="#ffffff")
        self.TIF_Label.configure(text='''TIF''')

    # just for testing the working of Option Menus
    def exchange_change_dropdown(self, *args):
        print(self.Exchange_Menu_Var.get())

    def client_change_dropdown(self, *args):
        client = self.Client_Menu_Var.get()
        print(client)
        self.Client_Description_Entry_Var.set(shares_and_clients.clients[client])

    def counter_party_change_dropdown(self, *args):
        print(self.Counter_Party_Menu_Var.get())

    def price_instruction_change_dropdown(self, *args):
        print(self.Price_Instruction_Menu_Var.get())

    def account_change_dropdown(self, *args):
        print(self.Account_Menu_Var.get())
    
    def symbol_change_dropdown(self, *args):
        share = self.Symbol_Menu_Var.get()
        print(share)
        self.Symbol_Description_Entry_Var.set(shares_and_clients.shares[share])
        '''
        self.Symbol_Description_Entry.delete(0, 'end')
        self.Symbol_Description_Entry.insert(0, shares_and_clients.shares[share])
        '''
    
    def tif_change_dropdown(self, *args):
        print(self.TIF_Menu_Var.get())

# ======================================================
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# ======================================================

from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=1, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip. This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in miliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

if __name__ == '__main__':
    vp_start_gui()





